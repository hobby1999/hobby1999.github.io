<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on cych blogs</title><link>https://hobby1999.github.io/posts/</link><description>Recent content in Posts on cych blogs</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 14 Oct 2024 23:09:30 +0800</lastBuildDate><atom:link href="https://hobby1999.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Hook 1 综述</title><link>https://hobby1999.github.io/posts/hook1/</link><pubDate>Mon, 14 Oct 2024 23:09:30 +0800</pubDate><guid>https://hobby1999.github.io/posts/hook1/</guid><description>&lt;h3 id="hook-综述">hook 综述&lt;/h3>
&lt;ol>
&lt;li>
&lt;h4 id="什么是hook">什么是Hook？&lt;/h4>
&lt;p>来看看维基百科的定义&lt;/p>
&lt;p>钩子编程（hooking），也称作“挂钩”，是计算机程序设计术语，指通过拦截软件模块间的函数调用、消息传递、事件传递来修改或扩展操作系统、应用程序或其他软件组件的行为的各种技术。处理被拦截的函数调用、事件、消息的代码，被称为钩子（hook）。&lt;/p>
&lt;p>钩子编程有多种用途，如调试、扩展功能。例如在键盘或鼠标事件到达应用程序之前拦截这些事件；拦截应用程序或其他模块的操作系统调用以监督行为、修改功能。也广泛用于benchmarking程序，如度量3D游戏的帧率。&lt;/p>
&lt;p>钩子编程也被用于恶意代码，如rootkit是各种通过假扮系统API调用输出来隐藏自身进程的可见性的工具与技术；游戏外挂是另一类例子。&lt;/p>
&lt;p>我是如何理解Hook的呢？&lt;/p>
&lt;p>计算机内 事务A 至 事务B 发送事务消息（无论是通过何种方式） 通过主动植入或被动植入一个事务 X 变为 事务A 至 事务X 至事务B，此处的程序X可以是一个独立运行的程序，也可以是向A 或 B植入的代码片段&lt;/p>
&lt;p>此处X实际上就是一段Hook，wiki上说的拦截，只是Hook可以达成的一个功能，实际上，X可以什么都不做，只是把它当作跳板，让事务A通往事务B的中间插入了一条事务X。&lt;/p>
&lt;p>那么简单来说，就是一个计算机事务至另一个计算机事务被插入中间人的过程，就是Hook&lt;/p>
&lt;/li>
&lt;li>
&lt;h4 id="为什么需要hook--hook-能达到什么效果--hook能做什么">为什么需要Hook / Hook 能达到什么效果 / Hook能做什么？&lt;/h4>
&lt;p>如标题所见，三个问题说的都是一件事情&lt;/p>
&lt;p>那么直入主题，我简单列下 Hook 能够达到的功能：&lt;/p>
&lt;ul>
&lt;li>代码保护&lt;/li>
&lt;li>掌控相关函数的控制权&lt;/li>
&lt;li>窃取相关传递消息&lt;/li>
&lt;li>修改传递参数&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>hook能做的事情很多，以上只是简单列举&lt;/p>
&lt;/li>
&lt;li>
&lt;h4 id="实现一个简单的hook">实现一个简单的Hook？&lt;/h4>
&lt;/li>
&lt;/ol></description></item></channel></rss>